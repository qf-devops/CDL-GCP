1. create compute engine with init script:
  init script:
  sudo su
  apt update
  apt -y install apache2
  sudo systemmctl start apache2
  sudo systemctl enable apache2
  echo "Hello World" > /var/www/html/index.html

in mmanagemenbt section >> automation

2. create one instance template and launch compute engine with instance template
   install docker:
     >apt install docker.io
     
   run docker run command to sgtart container:
     >docker run -itd -p 81:80 ubuntu/apache2
     
     docker stop 297850facf0f
     
     docker run -itd -p 81:80 --name n1 nginx
3. cretae 2nd vm
    demo1:
       docker sdwarm init
     demo2:
       docker swarm join (which generated in demo1 instance)
       
    demo1:
       docker node ls
       docker service create --name=n1 -p 81:80 nginx
       docker service ps n1
       dcoekr service scale n1=3
       docker service ps n1
       
4.
   clone:
     git clone https://github.com/qfitsolutions/docker.git
       cd docker
       docker stack deploy  -c stack-dc.yml mystack
       docker stack ps mystack
       docker stack services mystack
        
 5. Cloud run:
https://cloud.google.com/run/docs/quickstarts/build-and-deploy/deploy-python-service?hl=en_US

6. create gke cluster
   install kubectl command in your terminal or vm :  https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
      windows:  https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/
     
   get gke cluster credentials ==> kubeconfig
   kubectl run n1 --image=nginx --port=80
   kubectl get pod
   kubectl expose pod n1 --port=80 --target-port=80 --name=n1s --type=LoadBalancer
   kubectl get svc
   access the url from browser: http://34.69.14.17/
   
 7. kubernetyes dashboard:
     https://github.com/kubernetes/dashboard
   
8. deploy app with yml file:
    kubectl apply -f k8s-nginx.yml

9. deploy jenkinsserver in kubernetes


10. app engine example:
    1. launch  gcloud shell from gcp console
    2. run this command:   gcloud app create
    3. clone:
         git clone https://github.com/GoogleCloudPlatform/python-docs-samples
    4.  cd python-docs-samples/appengine/standard_python3/building-an-app/building-an-app-1
    5. deploy:
       gcloud app deploy
    6. open url:
      gcloud app browse
   7. Logs:
        gcloud app logs tail -s default
        
  11. cloud funtion:
  
  clone repo:  
      git clone https://github.com/GoogleCloudPlatform/nodejs-docs-samples.git
  switch to source code:  
     cd nodejs-docs-samples/functions/helloworld/helloworldGet/
  create:  
     gcloud functions deploy nodejs-http-function --gen2 --runtime=nodejs16 --region=us-central1 --source=. --entry-point=helloGET --trigger-http --allow-unauthenticated
  test: 
    curl -m 70 -X POST https://nodejs-http-function-divip4tqfa-uc.a.run.app     -H "Authorization: bearer $(gcloud auth print-identity-token)"     -H "Content-Type: application/json"     -d '{}'
  delete: 
    gcloud functions delete nodejs-http-function --gen2 --region us-central1
    
  12 . cloud stoarge creation:
      1. create cloudstorage bucket using gcloud cli  : gcloud storage buckets create gs://cdlstoragestaging
      2. upload files to bucket using gcloud cli : gsutil cp README-cloudshell.txt gs://cdlstoragestaging/
      3. download filesto bucket using gcloud cli : gsutil cp gs://cdlstoragestaging/* .
      
  13. blankdisk need to add to compueengine
       https://cloud.google.com/compute/docs/disks/add-persistent-disk#create_disk
        create compuet engine
        crate persistent disk
        attached PD to instance
        add filesystem
        mopunt it or add mount configurstion in /etc/fstab.
   14.  create cloud sql service with postgresql :  create through portal
        connect created database to run sql queries. : gcloud sql connect robot --user=root
         show databases: SHOW DATABASES;
        
         create database : CREATE DATABASE test;
         create table : CREATE TABLE movies(title VARCHAR(50) NOT NULL,genre VARCHAR(30) NOT NULL,director VARCHAR(60) NOT NULL,release_year INT NOT NULL,PRIMARY KEY(title));
         insert data:
           INSERT INTO movies VALUE ("Joker", "psychological thriller", "Todd Phillips", 2019);
           INSERT INTO movies VALUE ("Joker1", "psychological thriller", "Todd Phillips", 2019);
   
  15.  crete redis server with memorystore from gcp
        connect redis using gcloud or aother apis/commands
